package com.framasaas.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FranchiseCategoryMappingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFranchiseCategoryMappingAllPropertiesEquals(
        FranchiseCategoryMapping expected,
        FranchiseCategoryMapping actual
    ) {
        assertFranchiseCategoryMappingAutoGeneratedPropertiesEquals(expected, actual);
        assertFranchiseCategoryMappingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFranchiseCategoryMappingAllUpdatablePropertiesEquals(
        FranchiseCategoryMapping expected,
        FranchiseCategoryMapping actual
    ) {
        assertFranchiseCategoryMappingUpdatableFieldsEquals(expected, actual);
        assertFranchiseCategoryMappingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFranchiseCategoryMappingAutoGeneratedPropertiesEquals(
        FranchiseCategoryMapping expected,
        FranchiseCategoryMapping actual
    ) {
        assertThat(actual)
            .as("Verify FranchiseCategoryMapping auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFranchiseCategoryMappingUpdatableFieldsEquals(
        FranchiseCategoryMapping expected,
        FranchiseCategoryMapping actual
    ) {
        assertThat(actual)
            .as("Verify FranchiseCategoryMapping relevant properties")
            .satisfies(a -> assertThat(a.getServiceCategory()).as("check serviceCategory").isEqualTo(expected.getServiceCategory()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFranchiseCategoryMappingUpdatableRelationshipsEquals(
        FranchiseCategoryMapping expected,
        FranchiseCategoryMapping actual
    ) {
        assertThat(actual)
            .as("Verify FranchiseCategoryMapping relationships")
            .satisfies(a -> assertThat(a.getFranchise()).as("check franchise").isEqualTo(expected.getFranchise()));
    }
}
