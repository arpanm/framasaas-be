package com.framasaas.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ServiceOrderPaymentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderPaymentAllPropertiesEquals(ServiceOrderPayment expected, ServiceOrderPayment actual) {
        assertServiceOrderPaymentAutoGeneratedPropertiesEquals(expected, actual);
        assertServiceOrderPaymentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderPaymentAllUpdatablePropertiesEquals(ServiceOrderPayment expected, ServiceOrderPayment actual) {
        assertServiceOrderPaymentUpdatableFieldsEquals(expected, actual);
        assertServiceOrderPaymentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderPaymentAutoGeneratedPropertiesEquals(ServiceOrderPayment expected, ServiceOrderPayment actual) {
        assertThat(actual)
            .as("Verify ServiceOrderPayment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderPaymentUpdatableFieldsEquals(ServiceOrderPayment expected, ServiceOrderPayment actual) {
        assertThat(actual)
            .as("Verify ServiceOrderPayment relevant properties")
            .satisfies(a -> assertThat(a.getPaymentLink()).as("check paymentLink").isEqualTo(expected.getPaymentLink()))
            .satisfies(a -> assertThat(a.getPaymentStatus()).as("check paymentStatus").isEqualTo(expected.getPaymentStatus()))
            .satisfies(a -> assertThat(a.getMop()).as("check mop").isEqualTo(expected.getMop()))
            .satisfies(a -> assertThat(a.getPgTxnId()).as("check pgTxnId").isEqualTo(expected.getPgTxnId()))
            .satisfies(a -> assertThat(a.getPgTxnResponse()).as("check pgTxnResponse").isEqualTo(expected.getPgTxnResponse()))
            .satisfies(a -> assertThat(a.getPgTxnResponseTime()).as("check pgTxnResponseTime").isEqualTo(expected.getPgTxnResponseTime()))
            .satisfies(a -> assertThat(a.getPaymentInitiatedBy()).as("check paymentInitiatedBy").isEqualTo(expected.getPaymentInitiatedBy())
            )
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderPaymentUpdatableRelationshipsEquals(ServiceOrderPayment expected, ServiceOrderPayment actual) {
        // empty method
    }
}
