package com.framasaas.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class InventoryLocationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryLocationAllPropertiesEquals(InventoryLocation expected, InventoryLocation actual) {
        assertInventoryLocationAutoGeneratedPropertiesEquals(expected, actual);
        assertInventoryLocationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryLocationAllUpdatablePropertiesEquals(InventoryLocation expected, InventoryLocation actual) {
        assertInventoryLocationUpdatableFieldsEquals(expected, actual);
        assertInventoryLocationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryLocationAutoGeneratedPropertiesEquals(InventoryLocation expected, InventoryLocation actual) {
        assertThat(actual)
            .as("Verify InventoryLocation auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryLocationUpdatableFieldsEquals(InventoryLocation expected, InventoryLocation actual) {
        assertThat(actual)
            .as("Verify InventoryLocation relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getLocationType()).as("check locationType").isEqualTo(expected.getLocationType()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryLocationUpdatableRelationshipsEquals(InventoryLocation expected, InventoryLocation actual) {
        // empty method
    }
}
