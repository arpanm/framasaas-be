package com.framasaas.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ServiceOrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderAllPropertiesEquals(ServiceOrder expected, ServiceOrder actual) {
        assertServiceOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertServiceOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderAllUpdatablePropertiesEquals(ServiceOrder expected, ServiceOrder actual) {
        assertServiceOrderUpdatableFieldsEquals(expected, actual);
        assertServiceOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderAutoGeneratedPropertiesEquals(ServiceOrder expected, ServiceOrder actual) {
        assertThat(actual)
            .as("Verify ServiceOrder auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderUpdatableFieldsEquals(ServiceOrder expected, ServiceOrder actual) {
        assertThat(actual)
            .as("Verify ServiceOrder relevant properties")
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getOrderType()).as("check orderType").isEqualTo(expected.getOrderType()))
            .satisfies(a -> assertThat(a.getOrderStatus()).as("check orderStatus").isEqualTo(expected.getOrderStatus()))
            .satisfies(a -> assertThat(a.getInWarranty()).as("check inWarranty").isEqualTo(expected.getInWarranty()))
            .satisfies(a -> assertThat(a.getIsFree()).as("check isFree").isEqualTo(expected.getIsFree()))
            .satisfies(a -> assertThat(a.getIsSpareNeeded()).as("check isSpareNeeded").isEqualTo(expected.getIsSpareNeeded()))
            .satisfies(a -> assertThat(a.getConfirmedTime()).as("check confirmedTime").isEqualTo(expected.getConfirmedTime()))
            .satisfies(a -> assertThat(a.getClosedTime()).as("check closedTime").isEqualTo(expected.getClosedTime()))
            .satisfies(a -> assertThat(a.getServiceCharge()).as("check serviceCharge").isEqualTo(expected.getServiceCharge()))
            .satisfies(a -> assertThat(a.getTax()).as("check tax").isEqualTo(expected.getTax()))
            .satisfies(a -> assertThat(a.getTotalSpareCharges()).as("check totalSpareCharges").isEqualTo(expected.getTotalSpareCharges()))
            .satisfies(a -> assertThat(a.getTotalSpareTax()).as("check totalSpareTax").isEqualTo(expected.getTotalSpareTax()))
            .satisfies(a -> assertThat(a.getTotalCharges()).as("check totalCharges").isEqualTo(expected.getTotalCharges()))
            .satisfies(a -> assertThat(a.getTotalPaymentDone()).as("check totalPaymentDone").isEqualTo(expected.getTotalPaymentDone()))
            .satisfies(a ->
                assertThat(a.getCustomerInvoicePath()).as("check customerInvoicePath").isEqualTo(expected.getCustomerInvoicePath())
            )
            .satisfies(a -> assertThat(a.getNps()).as("check nps").isEqualTo(expected.getNps()))
            .satisfies(a -> assertThat(a.getPriority()).as("check priority").isEqualTo(expected.getPriority()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderUpdatableRelationshipsEquals(ServiceOrder expected, ServiceOrder actual) {
        assertThat(actual)
            .as("Verify ServiceOrder relationships")
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()))
            .satisfies(a -> assertThat(a.getServiceMaster()).as("check serviceMaster").isEqualTo(expected.getServiceMaster()))
            .satisfies(a -> assertThat(a.getArticle()).as("check article").isEqualTo(expected.getArticle()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()));
    }
}
