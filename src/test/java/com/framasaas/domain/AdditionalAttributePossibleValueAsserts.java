package com.framasaas.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AdditionalAttributePossibleValueAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdditionalAttributePossibleValueAllPropertiesEquals(
        AdditionalAttributePossibleValue expected,
        AdditionalAttributePossibleValue actual
    ) {
        assertAdditionalAttributePossibleValueAutoGeneratedPropertiesEquals(expected, actual);
        assertAdditionalAttributePossibleValueAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdditionalAttributePossibleValueAllUpdatablePropertiesEquals(
        AdditionalAttributePossibleValue expected,
        AdditionalAttributePossibleValue actual
    ) {
        assertAdditionalAttributePossibleValueUpdatableFieldsEquals(expected, actual);
        assertAdditionalAttributePossibleValueUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdditionalAttributePossibleValueAutoGeneratedPropertiesEquals(
        AdditionalAttributePossibleValue expected,
        AdditionalAttributePossibleValue actual
    ) {
        assertThat(actual)
            .as("Verify AdditionalAttributePossibleValue auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdditionalAttributePossibleValueUpdatableFieldsEquals(
        AdditionalAttributePossibleValue expected,
        AdditionalAttributePossibleValue actual
    ) {
        assertThat(actual)
            .as("Verify AdditionalAttributePossibleValue relevant properties")
            .satisfies(a -> assertThat(a.getPossibleValue()).as("check possibleValue").isEqualTo(expected.getPossibleValue()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdditionalAttributePossibleValueUpdatableRelationshipsEquals(
        AdditionalAttributePossibleValue expected,
        AdditionalAttributePossibleValue actual
    ) {
        assertThat(actual)
            .as("Verify AdditionalAttributePossibleValue relationships")
            .satisfies(a -> assertThat(a.getAttribute()).as("check attribute").isEqualTo(expected.getAttribute()));
    }
}
