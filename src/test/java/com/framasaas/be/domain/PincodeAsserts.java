package com.framasaas.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PincodeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPincodeAllPropertiesEquals(Pincode expected, Pincode actual) {
        assertPincodeAutoGeneratedPropertiesEquals(expected, actual);
        assertPincodeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPincodeAllUpdatablePropertiesEquals(Pincode expected, Pincode actual) {
        assertPincodeUpdatableFieldsEquals(expected, actual);
        assertPincodeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPincodeAutoGeneratedPropertiesEquals(Pincode expected, Pincode actual) {
        assertThat(actual)
            .as("Verify Pincode auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPincodeUpdatableFieldsEquals(Pincode expected, Pincode actual) {
        assertThat(actual)
            .as("Verify Pincode relevant properties")
            .satisfies(a -> assertThat(a.getPincode()).as("check pincode").isEqualTo(expected.getPincode()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPincodeUpdatableRelationshipsEquals(Pincode expected, Pincode actual) {
        assertThat(actual)
            .as("Verify Pincode relationships")
            .satisfies(a -> assertThat(a.getFranchiseRule()).as("check franchiseRule").isEqualTo(expected.getFranchiseRule()));
    }
}
