package com.framasaas.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ServiceOrderSpareAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderSpareAllPropertiesEquals(ServiceOrderSpare expected, ServiceOrderSpare actual) {
        assertServiceOrderSpareAutoGeneratedPropertiesEquals(expected, actual);
        assertServiceOrderSpareAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderSpareAllUpdatablePropertiesEquals(ServiceOrderSpare expected, ServiceOrderSpare actual) {
        assertServiceOrderSpareUpdatableFieldsEquals(expected, actual);
        assertServiceOrderSpareUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderSpareAutoGeneratedPropertiesEquals(ServiceOrderSpare expected, ServiceOrderSpare actual) {
        assertThat(actual)
            .as("Verify ServiceOrderSpare auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderSpareUpdatableFieldsEquals(ServiceOrderSpare expected, ServiceOrderSpare actual) {
        assertThat(actual)
            .as("Verify ServiceOrderSpare relevant properties")
            .satisfies(a -> assertThat(a.getPrice()).as("check price").isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getTax()).as("check tax").isEqualTo(expected.getTax()))
            .satisfies(a -> assertThat(a.getTotalCharge()).as("check totalCharge").isEqualTo(expected.getTotalCharge()))
            .satisfies(a -> assertThat(a.getOrderedFrom()).as("check orderedFrom").isEqualTo(expected.getOrderedFrom()))
            .satisfies(a -> assertThat(a.getSpareStatus()).as("check spareStatus").isEqualTo(expected.getSpareStatus()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderSpareUpdatableRelationshipsEquals(ServiceOrderSpare expected, ServiceOrderSpare actual) {
        assertThat(actual)
            .as("Verify ServiceOrderSpare relationships")
            .satisfies(a -> assertThat(a.getServiceOrder()).as("check serviceOrder").isEqualTo(expected.getServiceOrder()))
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()));
    }
}
