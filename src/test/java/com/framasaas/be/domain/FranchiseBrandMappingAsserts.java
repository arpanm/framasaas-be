package com.framasaas.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FranchiseBrandMappingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFranchiseBrandMappingAllPropertiesEquals(FranchiseBrandMapping expected, FranchiseBrandMapping actual) {
        assertFranchiseBrandMappingAutoGeneratedPropertiesEquals(expected, actual);
        assertFranchiseBrandMappingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFranchiseBrandMappingAllUpdatablePropertiesEquals(
        FranchiseBrandMapping expected,
        FranchiseBrandMapping actual
    ) {
        assertFranchiseBrandMappingUpdatableFieldsEquals(expected, actual);
        assertFranchiseBrandMappingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFranchiseBrandMappingAutoGeneratedPropertiesEquals(
        FranchiseBrandMapping expected,
        FranchiseBrandMapping actual
    ) {
        assertThat(actual)
            .as("Verify FranchiseBrandMapping auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFranchiseBrandMappingUpdatableFieldsEquals(FranchiseBrandMapping expected, FranchiseBrandMapping actual) {
        assertThat(actual)
            .as("Verify FranchiseBrandMapping relevant properties")
            .satisfies(a -> assertThat(a.getBrand()).as("check brand").isEqualTo(expected.getBrand()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFranchiseBrandMappingUpdatableRelationshipsEquals(
        FranchiseBrandMapping expected,
        FranchiseBrandMapping actual
    ) {
        assertThat(actual)
            .as("Verify FranchiseBrandMapping relationships")
            .satisfies(a -> assertThat(a.getFranchise()).as("check franchise").isEqualTo(expected.getFranchise()));
    }
}
