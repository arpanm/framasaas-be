package com.framasaas.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ServiceOrderFranchiseAssignmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderFranchiseAssignmentAllPropertiesEquals(
        ServiceOrderFranchiseAssignment expected,
        ServiceOrderFranchiseAssignment actual
    ) {
        assertServiceOrderFranchiseAssignmentAutoGeneratedPropertiesEquals(expected, actual);
        assertServiceOrderFranchiseAssignmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderFranchiseAssignmentAllUpdatablePropertiesEquals(
        ServiceOrderFranchiseAssignment expected,
        ServiceOrderFranchiseAssignment actual
    ) {
        assertServiceOrderFranchiseAssignmentUpdatableFieldsEquals(expected, actual);
        assertServiceOrderFranchiseAssignmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderFranchiseAssignmentAutoGeneratedPropertiesEquals(
        ServiceOrderFranchiseAssignment expected,
        ServiceOrderFranchiseAssignment actual
    ) {
        assertThat(actual)
            .as("Verify ServiceOrderFranchiseAssignment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderFranchiseAssignmentUpdatableFieldsEquals(
        ServiceOrderFranchiseAssignment expected,
        ServiceOrderFranchiseAssignment actual
    ) {
        assertThat(actual)
            .as("Verify ServiceOrderFranchiseAssignment relevant properties")
            .satisfies(a ->
                assertThat(a.getServiceOrderAssignmentStatus())
                    .as("check serviceOrderAssignmentStatus")
                    .isEqualTo(expected.getServiceOrderAssignmentStatus())
            )
            .satisfies(a -> assertThat(a.getNps()).as("check nps").isEqualTo(expected.getNps()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getAssignedTime()).as("check assignedTime").isEqualTo(expected.getAssignedTime()))
            .satisfies(a -> assertThat(a.getMovedBackTime()).as("check movedBackTime").isEqualTo(expected.getMovedBackTime()))
            .satisfies(a -> assertThat(a.getVisitTime()).as("check visitTime").isEqualTo(expected.getVisitTime()))
            .satisfies(a -> assertThat(a.getSpareOrderTime()).as("check spareOrderTime").isEqualTo(expected.getSpareOrderTime()))
            .satisfies(a -> assertThat(a.getSpareDeliveryTime()).as("check spareDeliveryTime").isEqualTo(expected.getSpareDeliveryTime()))
            .satisfies(a -> assertThat(a.getCompletedTime()).as("check completedTime").isEqualTo(expected.getCompletedTime()))
            .satisfies(a -> assertThat(a.getCompletionOTP()).as("check completionOTP").isEqualTo(expected.getCompletionOTP()))
            .satisfies(a -> assertThat(a.getCancellationOTP()).as("check cancellationOTP").isEqualTo(expected.getCancellationOTP()))
            .satisfies(a -> assertThat(a.getFranchiseCommision()).as("check franchiseCommision").isEqualTo(expected.getFranchiseCommision())
            )
            .satisfies(a ->
                assertThat(a.getFranchiseCommisionTax()).as("check franchiseCommisionTax").isEqualTo(expected.getFranchiseCommisionTax())
            )
            .satisfies(a ->
                assertThat(a.getFranchiseInvoicePath()).as("check franchiseInvoicePath").isEqualTo(expected.getFranchiseInvoicePath())
            )
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServiceOrderFranchiseAssignmentUpdatableRelationshipsEquals(
        ServiceOrderFranchiseAssignment expected,
        ServiceOrderFranchiseAssignment actual
    ) {
        assertThat(actual)
            .as("Verify ServiceOrderFranchiseAssignment relationships")
            .satisfies(a -> assertThat(a.getServiceOrder()).as("check serviceOrder").isEqualTo(expected.getServiceOrder()))
            .satisfies(a -> assertThat(a.getFranchise()).as("check franchise").isEqualTo(expected.getFranchise()));
    }
}
