package com.framasaas.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FranchiseUserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFranchiseUserAllPropertiesEquals(FranchiseUser expected, FranchiseUser actual) {
        assertFranchiseUserAutoGeneratedPropertiesEquals(expected, actual);
        assertFranchiseUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFranchiseUserAllUpdatablePropertiesEquals(FranchiseUser expected, FranchiseUser actual) {
        assertFranchiseUserUpdatableFieldsEquals(expected, actual);
        assertFranchiseUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFranchiseUserAutoGeneratedPropertiesEquals(FranchiseUser expected, FranchiseUser actual) {
        assertThat(actual)
            .as("Verify FranchiseUser auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFranchiseUserUpdatableFieldsEquals(FranchiseUser expected, FranchiseUser actual) {
        assertThat(actual)
            .as("Verify FranchiseUser relevant properties")
            .satisfies(a -> assertThat(a.getUserName()).as("check userName").isEqualTo(expected.getUserName()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getContact()).as("check contact").isEqualTo(expected.getContact()))
            .satisfies(a -> assertThat(a.getUserStatus()).as("check userStatus").isEqualTo(expected.getUserStatus()))
            .satisfies(a -> assertThat(a.getUserRole()).as("check userRole").isEqualTo(expected.getUserRole()))
            .satisfies(a -> assertThat(a.getCreateddBy()).as("check createddBy").isEqualTo(expected.getCreateddBy()))
            .satisfies(a -> assertThat(a.getCreatedTime()).as("check createdTime").isEqualTo(expected.getCreatedTime()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedTime()).as("check updatedTime").isEqualTo(expected.getUpdatedTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFranchiseUserUpdatableRelationshipsEquals(FranchiseUser expected, FranchiseUser actual) {
        assertThat(actual)
            .as("Verify FranchiseUser relationships")
            .satisfies(a -> assertThat(a.getFranchise()).as("check franchise").isEqualTo(expected.getFranchise()))
            .satisfies(a -> assertThat(a.getSkillRuleSet()).as("check skillRuleSet").isEqualTo(expected.getSkillRuleSet()));
    }
}
